{"version":3,"sources":["App.js","serviceWorker.js","Rubik.js","index.js","utils.js"],"names":["App","rubik","this","props","console","log","react_default","a","createElement","className","RubikContext","Consumer","Fragment","Button_default","onClick","getDoMove","shuffle","Component","Boolean","window","location","hostname","match","OrbitControls","require","THREE","FACE_MATERIALS","map","c","color","ambient","CUBE_MATERIAL","LEGAL_MOVES","__webpack_require__","d","__webpack_exports__","canvas","document","getElementById","Rubik","element","_this$scene","_this","Object","classCallCheck","makeCube","x","y","z","cubeGeometry","cube","castShadow","position","set","rubikPosition","clone","move","pushMove","moveQueue","push","doNextMove","getMoveInfo","axis","center","CUBE_SIZE","rotation","endsWith","getSide","_this$getMoveInfo","cubes","filter","Math","abs","nextMove","pop","isMoving","pivot","updateMatrixWorld","scene","add","_this$getMoveInfo2","moveAxis","moveRotation","rotationGroup","forEach","child","parent","applyMatrix","getInverse","matrixWorld","remove","currentMove","doMove","PI","finishMove","undefined","applyMatrix4","makeCubes","setSize","width","height","camera","aspect","updateProjectionMatrix","renderer","getRandomInt","max","floor","random","doShuffle","i","length","render","requestAnimationFrame","clientWidth","clientHeight","antialias","setClearColor","shadowMapEnabled","append","domElement","lookAt","orbitControl","apply","toConsumableArray","addEventListener","ev","React","createContext","ReactDOM","Provider","value","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb3873a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { RubikContext } from \".\";\n\nclass App extends Component {\n  render() {\n    const { rubik } = this.props;\n    console.log(rubik);\n    return (\n      <div className=\"App\">\n        <RubikContext.Consumer>\n          {rubik =>\n            rubik && (\n              <>\n                <div className=\"Moves\">\n                  <Button onClick={rubik.getDoMove(\"F\")}>Front</Button>\n                  <Button onClick={rubik.getDoMove(\"F'\")}>Front R</Button>\n                  <Button onClick={rubik.getDoMove(\"B\")}>Back</Button>\n                  <Button onClick={rubik.getDoMove(\"B'\")}>Back R</Button>\n                  <Button onClick={rubik.getDoMove(\"L\")}>Left</Button>\n                  <Button onClick={rubik.getDoMove(\"L'\")}>Left R</Button>\n                  <Button onClick={rubik.getDoMove(\"R\")}>Right</Button>\n                  <Button onClick={rubik.getDoMove(\"R'\")}>Right R</Button>\n                  <Button onClick={rubik.getDoMove(\"U\")}>Up</Button>\n                  <Button onClick={rubik.getDoMove(\"U'\")}>Up R</Button>\n                  <Button onClick={rubik.getDoMove(\"D\")}>Down</Button>\n                  <Button onClick={rubik.getDoMove(\"D'\")}>Down R</Button>\n\n                  <Button onClick={rubik.shuffle()}>Shuffle</Button>\n                </div>\n              </>\n            )\n          }\n        </RubikContext.Consumer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as THREE from \"three\";\nimport * as SceneUtils from \"./utils\";\nconst OrbitControls = require(\"three-orbit-controls\")(THREE);\n\nconst COLORS = [0x009b48, 0xb90000, 0x0045ad, 0xff5800, 0xffffff, 0xffd500];\nconst FACE_MATERIALS = COLORS.map(\n  c => new THREE.MeshLambertMaterial({ color: c, ambient: c })\n);\nconst CUBE_MATERIAL = new THREE.MeshFaceMaterial(FACE_MATERIALS);\nconst CUBE_SIZE = 3;\nconst CUBE_SPACING = 0.5;\n\nconst BOUNDARY_SIZE = CUBE_SIZE + CUBE_SPACING;\nconst ROTATION_SPEED = 0.1;\n\nconst LEGAL_MOVES = [\n  \"F\",\n  \"F'\",\n  \"B\",\n  \"B'\",\n  \"L\",\n  \"L'\",\n  \"R\",\n  \"R'\",\n  \"U\",\n  \"U'\",\n  \"D\",\n  \"D'\"\n];\n\nexport default class Rubik {\n  constructor(element) {\n    this.width = element.clientWidth;\n    this.height = element.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      this.width / this.height,\n      0.1,\n      1000\n    );\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    this.renderer.setClearColor(0x000000, 1.0);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.shadowMapEnabled = true;\n    element.append(this.renderer.domElement);\n\n    this.camera.position.set(-20, 20, 30);\n    this.camera.lookAt(this.scene.position);\n\n    this.scene.add(new THREE.AmbientLight(0xffffff));\n\n    this.orbitControl = new OrbitControls(\n      this.camera,\n      this.renderer.domElement\n    );\n\n    this.cubes = this.makeCubes();\n    this.scene.add(...this.cubes);\n    this.moveQueue = [];\n\n    this.pivot = new THREE.Object3D();\n    this.isMoving = false;\n    this.moveAxis = undefined;\n    this.moveRotation = undefined;\n    this.rotationGroup = [];\n\n    this.render();\n  }\n\n  makeCube = (x, y, z) => {\n    const cubeGeometry = new THREE.CubeGeometry(\n      CUBE_SIZE,\n      CUBE_SIZE,\n      CUBE_SIZE\n    );\n    const cube = new THREE.Mesh(cubeGeometry, CUBE_MATERIAL);\n    cube.castShadow = true;\n\n    cube.position.set(x, y, z);\n    cube.rubikPosition = cube.position.clone();\n\n    return cube;\n  };\n\n  getDoMove = move => () => this.pushMove(move);\n\n  pushMove = move => {\n    this.moveQueue.push(move);\n    this.doNextMove();\n  };\n\n  getMoveInfo = move => {\n    let axis, center, rotation;\n\n    switch (move) {\n      case \"F\":\n      case \"F'\":\n        axis = \"x\";\n        center = new THREE.Vector3(-BOUNDARY_SIZE, 0, 0);\n        break;\n      case \"B\":\n      case \"B'\":\n        axis = \"x\";\n        center = new THREE.Vector3(BOUNDARY_SIZE, 0, 0);\n        break;\n      case \"D\":\n      case \"D'\":\n        axis = \"y\";\n        center = new THREE.Vector3(0, -BOUNDARY_SIZE, 0);\n        break;\n      case \"U\":\n      case \"U'\":\n        axis = \"y\";\n        center = new THREE.Vector3(0, BOUNDARY_SIZE, 0);\n        break;\n      case \"L\":\n      case \"L'\":\n        axis = \"z\";\n        center = new THREE.Vector3(0, 0, -BOUNDARY_SIZE);\n        break;\n      case \"R\":\n      case \"R'\":\n        axis = \"z\";\n        center = new THREE.Vector3(0, 0, BOUNDARY_SIZE);\n        break;\n      default:\n        return [-1, new THREE.Vector3(0, 0, 0)];\n    }\n\n    rotation = move.endsWith(\"'\") ? -1 : 1;\n    return {\n      axis,\n      center,\n      rotation\n    };\n  };\n\n  getSide = move => {\n    const { axis, center } = this.getMoveInfo(move);\n    return this.cubes.filter(\n      cube => Math.abs(cube.rubikPosition[axis] - center[axis]) < 1e-7\n    );\n  };\n\n  doNextMove = () => {\n    const nextMove = this.moveQueue.pop();\n\n    if (nextMove) {\n      if (!this.isMoving) {\n        this.isMoving = true;\n        this.pivot.rotation.set(0, 0, 0);\n        this.pivot.updateMatrixWorld();\n        this.scene.add(this.pivot);\n\n        const { axis, rotation } = this.getMoveInfo(nextMove);\n\n        this.moveAxis = axis;\n        this.moveRotation = rotation;\n\n        this.rotationGroup = this.getSide(nextMove);\n        this.rotationGroup.forEach(cube => {\n          SceneUtils.attach(cube, this.scene, this.pivot);\n        });\n\n        this.currentMove = nextMove;\n      }\n    }\n  };\n\n  doMove = () => {\n    if (this.pivot.rotation[this.moveAxis] >= Math.PI / 2) {\n      this.pivot.rotation[this.moveAxis] = Math.PI / 2;\n      this.finishMove();\n    } else if (this.pivot.rotation[this.moveAxis] <= -Math.PI / 2) {\n      this.pivot.rotation[this.moveAxis] = -Math.PI / 2;\n      this.finishMove();\n    } else {\n      this.pivot.rotation[this.moveAxis] += this.moveRotation * ROTATION_SPEED;\n    }\n  };\n\n  finishMove = () => {\n    this.isMoving = false;\n    this.moveAxis = undefined;\n    this.moveRotation = undefined;\n    this.pivot.updateMatrixWorld();\n    this.scene.remove(this.pivot);\n\n    this.rotationGroup.forEach(cube => {\n      cube.updateMatrixWorld();\n      cube.rubikPosition = cube.position.clone();\n      cube.rubikPosition.applyMatrix4(this.pivot.matrixWorld);\n\n      SceneUtils.detach(cube, this.pivot, this.scene);\n    });\n\n    this.doNextMove();\n  };\n\n  makeCubes = () => {\n    const cubes = [];\n    for (let x = -1; x <= 1; ++x) {\n      for (let y = -1; y <= 1; ++y) {\n        for (let z = -1; z <= 1; ++z) {\n          cubes.push(\n            this.makeCube(\n              x * BOUNDARY_SIZE,\n              y * BOUNDARY_SIZE,\n              z * BOUNDARY_SIZE\n            )\n          );\n        }\n      }\n    }\n    return cubes;\n  };\n\n  setSize = (width, height) => {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n  };\n\n  getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  shuffle = () => () => this.doShuffle();\n\n  doShuffle = () => {\n    for (let i = 0; i < 20; ++i) {\n      const move = LEGAL_MOVES[this.getRandomInt(LEGAL_MOVES.length - 1)];\n      this.moveQueue.push(move);\n    }\n    this.doNextMove();\n  };\n\n  render = () => {\n    if (this.isMoving) {\n      this.doMove();\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.render);\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Rubik from \"./Rubik\";\n\nconst canvas = document.getElementById(\"canvas\");\nconst rubik = new Rubik(canvas);\nwindow.addEventListener(\"resize\", ev => {\n  rubik.setSize(canvas.clientWidth, canvas.clientHeight);\n});\n\nexport const RubikContext = React.createContext();\nReactDOM.render(\n  <RubikContext.Provider value={rubik}>\n    <App />\n  </RubikContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as THREE from \"three\";\n\nexport function detach(child, parent, scene) {\n  child.applyMatrix(parent.matrixWorld);\n  parent.remove(child);\n  scene.add(child);\n}\n\nexport function attach(child, scene, parent) {\n  child.applyMatrix(new THREE.Matrix4().getInverse(parent.matrixWorld));\n\n  scene.remove(child);\n  parent.add(child);\n}\n"],"sourceRoot":""}